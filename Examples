#!/usr/bin/php
<?php
require __DIR__ . '/vendor/autoload.php';

use Shiptheory\Http\ShiptheoryClient;
use Shiptheory\Objects\AddressTaxNumberTypes;
use Shiptheory\Objects\ListShipmentQuery;
use Shiptheory\Objects\PackageQuery;
use Shiptheory\Objects\Product;
use Shiptheory\Objects\ProductQuery;
use Shiptheory\Objects\ProductSortParameters;
use Shiptheory\Objects\Recipient;
use Shiptheory\Objects\ReturnLabel;
use Shiptheory\Objects\SearchShipmentQuery;
use Shiptheory\Objects\Sender;
use Shiptheory\Objects\Shipment;
use Shiptheory\Objects\ShipmentDetail;
use Shiptheory\Objects\ShipmentProduct;
use Shiptheory\Objects\TaxNumber;

$client = new ShiptheoryClient('test@test.com', 'Password123!');

//Start new shipment data object
$shipment = new Shipment();
$shipment->setReference('Test1234');
$shipment->setReference2('Test5678');

// Set Shipment Details
$shipment_detail = new ShipmentDetail();
$shipment_detail->setWeight(1);
$shipment_detail->setParcels(1);
$shipment_detail->setValue(1);
$shipment_detail->setShippingPrice(2.99);
$shipment_detail->setReference3('ORDERREF3');
$shipment_detail->setSalesSource('My Store');
$shipment_detail->setShipDate('2022-04-30');
$shipment_detail->setCurrencyCode('GBP');

// Set Recipient
$reciever = new Recipient();
$reciever->setCompany('Shiptheory');
$reciever->setFirstname('Test');
$reciever->setLastname('Customer');
$reciever->setAddressLine1('Unit 4.1 Paintworks');
$reciever->setAddressLine2('Bath Road');
$reciever->setCity('Bristol');
$reciever->setCountry('GB');
$reciever->setPostcode('BS4 3EH');
$reciever->setEmail('recipient@test.com');
$reciever->setTelephone('01234567890');
$reciever->setWhat3Words('///what.three.words');
$eori = new TaxNumber('GB205672212000', AddressTaxNumberTypes::EORI);
$vat = new TaxNumber('GB123456789', AddressTaxNumberTypes::VAT);
$reciever->setTaxNumbers([$eori, $vat]);

// Set sender
$sender = new Sender();
$sender->setCompany('Shiptheory');
$sender->setFirstname('Test');
$sender->setLastname('Shipper');
$sender->setAddressLine1('Bristol Old Vic');
$sender->setAddressLine2('King Street');
$sender->setCity('Bristol');
$sender->setCountry('GB');
$sender->setPostcode('BS1 4ED');
$sender->setEmail('sender@test.com');
$sender->setTelephone('01234567890');

// Set Product
$product = new ShipmentProduct();
$product->setName('My Test Product');
$product->setSku('TestProd1');
$product->setQty(1);
$product->setValue(1);
$product->setWeight(1);
$product->setCommodityCode('8443991000');
$product->setCommodityManucountry('PL');

// Add all elements to the shipment
$shipment->setShipmentDetail($shipment_detail);
$shipment->setRecipient($reciever);
$shipment->setSender($sender);
$shipment->setProducts([$product]);

// Send shipment to Shiptheory
$data = $shipment->toJson(true);
$result = $client->bookShipment($data);

var_dump($result);

// // View a shipment
var_dump($client->viewShipment('Test1234'));

// List shipments
$list_fields = [
    'channel_name' => 'Api',
    'status' => 'Ignored',
    'limit' => 1
];
$list_query = new ListShipmentQuery($list_fields);
var_dump($client->listShipment($list_query->toQueryParams()));

// Search for shipments
$search_fields = [
    'created_from' => '2022-04-01',
    'created_to' => '2022-04-30',
    'include_products' => 1,
];

$search_query = new SearchShipmentQuery($search_fields);
var_dump($client->searchShipment($search_query->toQueryParams()));

// Search for packages
$package_fields = [
    'length' => 25,
    'width' => 25,
    'height' => 25,
];

$package_query = new PackageQuery($package_fields);
var_dump($client->getPackageSizes($package_query->toQueryParams()));

// List services
var_dump($client->getOutgoingDeliveryServices());

// Create a return label
$label = new ReturnLabel();
$label->setOutgoingReference('Test1234');
$label->setDeliveryPostcode('BS4 3EH');
$label->setReturnService(1);
$label->setExpiry('2022-05-30');

$data = $label->toJson(true);
var_dump($client->createReturnLabel($data));

// Add a new Product
$product = new Product();
$product->setSku('API-Product-1');
$product->setName('API Test Product');
$product->setPrice(1.99);
$product->setWeight(1.5);
$product->setBarcode('0123456789');
$product->setCommodityCode('8443991000');
$product->setCommodityManucountry('GB');
$product->setCommodityDescription('This is a test product');
$product->setCommodityComposition('Electronic components');
$product->setLength(25);
$product->setWidth(27.69);
$product->setHeight(4.66);

$data = $product->toJson(true);
var_dump($client->addProduct($data));

// View a product
var_dump($client->viewProduct('API-Product-1'));

// Update a product
$product = new Product();
$product->setPrice(5.99);

$data = $product->toJson(true);
var_dump($client->updateProduct('API-Product-1', $data));

// List products
$product_fields = [
    'sort' => ProductSortParameters::PRICE,
    'limit' => 25
];

$product_query = new ProductQuery($product_fields);
var_dump($client->listProducts($product_query->toQueryParams()));
